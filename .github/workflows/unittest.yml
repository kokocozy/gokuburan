# GitHub Action for Laravel with MySQL
name: Testing Laravel with MySQL
on: [push, pull_request]
jobs:
  laravel:
    name: Laravel 8.2
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php-versions: [8.2]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, dom, fileinfo, mysql
          coverage: xdebug #optional
      - name: Start mysql service
        run: sudo /etc/init.d/mysql start
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install Composer dependencies
        run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
      - name: Testing Code
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate
      - name: Run PHP CodeSniffer (Linter)
        run: |
            composer require --dev squizlabs/php_codesniffer
            vendor/bin/phpcs --standard=PSR12 app/

      - name: Clear Config
        run: php artisan config:clear
      - name: Run Migration
        run: php artisan migrate -v
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
      - name: Test with phpunit
        run: | 
            composer require --dev phpunit/phpunit
            vendor/bin/phpunit/ --coverage-text
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
      - name: Run Test suite
        run: php artisan test
      - name: Send Telegram Notification
        env:
            TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
            TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
            GITHUB_ACTOR: ${{ github.actor }}
            GITHUB_REPOSITORY: ${{ github.repository }}
            GITHUB_REF: ${{ github.ref }}
            GITHUB_SHA: ${{ github.sha }}
        run: |
              MESSAGE="ðŸ”” Repository *$GITHUB_REPOSITORY* baru saja dideploy oleh $GITHUB_ACTOR. 
              Branch: $GITHUB_REF
              Commit: [$GITHUB_SHA:0:7](https://github.com/$GITHUB_REPOSITORY/commit/$GITHUB_SHA)"
              
              curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
                -d chat_id=$TELEGRAM_CHAT_ID \
                -d text="$MESSAGE" \
                -d parse_mode="Markdown"